{"version":3,"file":"components_MapComponent_tsx.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AACA;AAMA;AAAA;;AACA;AAsEA;AArEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrEA","sources":["webpack:///./components/MapComponent.tsx","webpack:///./map.ts","webpack:///./mapboxApiKey.ts"],"sourcesContent":["import React from 'react';\nimport { GpxInfo, LatLon } from '../types';\n\nimport { MAPBOX_API_KEY } from '../mapboxApiKey';\nimport { toGeoJson } from '../map';\nimport mapboxgl from 'mapbox-gl';\n\ntype Props = {\n    gpxInfo: GpxInfo;\n};\n\nexport default class MapComponent extends React.Component<Props, {}> {\n    mapDivRef = React.createRef<HTMLDivElement>();\n    async componentDidMount() {\n        const gpsPoints = this.props.gpxInfo.points;\n        const map = new mapboxgl.Map({\n            container: this.mapDivRef.current!,\n            zoom: 16,\n            pitch: 60,\n            center: toGeoJson(gpsPoints[0]),\n            // TODO: let user pick the style\n            style: ' mapbox://styles/mapbox/outdoors-v11',\n            accessToken: MAPBOX_API_KEY,\n        });\n        const addSource = (\n            id: string,\n            points: LatLon[],\n            params: mapboxgl.LinePaint\n        ) => {\n            map.addSource(id, {\n                type: 'geojson',\n                data: {\n                    type: 'Feature',\n                    properties: {},\n                    geometry: {\n                        type: 'LineString',\n                        coordinates: points.map(toGeoJson),\n                    },\n                },\n            }).addLayer({\n                id,\n                type: 'line',\n                source: id,\n                layout: {\n                    'line-join': 'round',\n                    'line-cap': 'round',\n                },\n                paint: params,\n            });\n        };\n        await new Promise((resolve) => {\n            map.once('styledata', () => {\n                addSource('gpxTrack', gpsPoints, {\n                    // TODO: let user pick color/width?\n                    'line-color': '#888',\n                    'line-width': 2,\n                });\n                resolve(map);\n            });\n        });\n    }\n\n    render() {\n        // TODO outline:\n        // 1. map itself\n        // 2. scrubbable progress bar, and playback rate (also slider?)\n        // 3. followcam toggle\n        // 4. inputs for the different options:\n        //  - constant speed or given speed\n        //  - map style\n        //  - icon type, icon size\n        //  - line color, line thickness\n        // bonus:\n        // - elevation profile?\n        // TODO: show gpx info and map component\n        // TODO: also options for various things\n        return (\n            <>\n                <div id=\"map-container\" ref={this.mapDivRef} />\n            </>\n        );\n    }\n}\n","import { MAPBOX_API_KEY } from './mapboxApiKey';\nimport { LatLon } from './types';\n\nexport function toGeoJson(point: LatLon): [number, number] {\n    return [point.lon, point.lat];\n}\n\nexport function toGeoJsonFeature(point: LatLon) {\n    return {\n        type: 'Feature' as const,\n        geometry: {\n            type: 'Point' as const,\n            coordinates: toGeoJson(point),\n        },\n        properties: {},\n    };\n}\n\nexport function toGeoJsonLineString(from: LatLon, to: LatLon) {\n    return {\n        type: 'Feature' as const,\n        geometry: {\n            type: 'LineString' as const,\n            coordinates: [toGeoJson(from), toGeoJson(to)],\n        },\n        properties: {},\n    };\n}\n\nexport function findCenter(gpsPoints: LatLon[]): [number, number] {\n    const n = gpsPoints.length;\n    const avg = gpsPoints.reduce(\n        (prev, cur) => ({\n            lat: prev.lat + cur.lat / n,\n            lon: prev.lon + cur.lon / n,\n        }),\n        { lat: 0, lon: 0 }\n    );\n    return toGeoJson(avg);\n}\n\nexport function findBounds(gpsPoints: LatLon[]): mapboxgl.LngLatBoundsLike {\n    const [sw, ne] = gpsPoints.reduce(\n        ([sw, ne], cur) => [\n            {\n                lat: Math.min(cur.lat, sw.lat),\n                lng: Math.min(cur.lon, sw.lng),\n            },\n            { lat: Math.max(cur.lat, ne.lat), lng: Math.max(cur.lon, ne.lng) },\n        ],\n        [\n            { lat: Number.MAX_SAFE_INTEGER, lng: Number.MAX_SAFE_INTEGER },\n            { lat: Number.MIN_SAFE_INTEGER, lng: Number.MIN_SAFE_INTEGER },\n        ]\n    );\n    // Add padding to every side\n    const pad = 0.15;\n    const x = (ne.lat - sw.lat) * pad;\n    const y = (ne.lng - sw.lng) * pad;\n    return [\n        {\n            lat: sw.lat - x,\n            lng: sw.lng - y,\n        },\n        {\n            lat: ne.lat + x,\n            lng: ne.lng + y,\n        },\n    ];\n}\n","export const MAPBOX_API_KEY =\n    'pk.eyJ1IjoicGVsbWVycyIsImEiOiJja2hpdTB3cnEwOW9zMnhwZnM5aDNmOGg1In0.DgXW9I1sf7pA_K-AqvN91g';\n"],"names":[],"sourceRoot":""}